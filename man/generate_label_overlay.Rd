% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_label_overlay.R
\name{generate_label_overlay}
\alias{generate_label_overlay}
\title{Generate Label Overlay}
\usage{
generate_label_overlay(
  labels,
  extent,
  x = NULL,
  y = NULL,
  heightmap = NULL,
  width = NA,
  height = NA,
  resolution_multiply = 1,
  text_size = 1,
  color = "black",
  font = 1,
  pch = 16,
  point_size = 1,
  point_color = NA,
  offset = c(0, 0),
  data_label_column = NULL,
  halo_color = NA,
  halo_expand = 0,
  halo_alpha = 1,
  halo_offset = c(0, 0),
  halo_blur = 1,
  seed = NA
)
}
\arguments{
\item{labels}{A character vector of labels, or an \code{sf} object with \code{POINT} geometry and a column for labels.}

\item{extent}{Either an object representing the spatial extent of the scene
(either from the \code{raster}, \code{terra}, \code{sf}, or \code{sp} packages),
a length-4 numeric vector specifying \code{c("xmin", "xmax","ymin","ymax")}, or the spatial object (from
the previously aforementioned packages) which will be automatically converted to an extent object.}

\item{x}{Default \code{NULL}. The x-coordinate, if \code{labels} is not an \code{sf} object.}

\item{y}{Default \code{NULL}. The y-coordinate, if \code{labels} is not an \code{sf} object.}

\item{heightmap}{Default \code{NULL}. The original height map. Pass this in to extract the dimensions of the resulting
overlay automatically.}

\item{width}{Default \code{NA}. Width of the resulting overlay. Default the same dimensions as height map.}

\item{height}{Default \code{NA}. Width of the resulting overlay. Default the same dimensions as height map.}

\item{resolution_multiply}{Default \code{1}. If passing in \code{heightmap} instead of width/height, amount to
increase the resolution of the overlay, which should make lines/polygons/text finer.
Should be combined with \link[=add_overlay]{\code{add_overlay(rescale_original = TRUE)}} to ensure those added details are captured
in the final map.}

\item{text_size}{Default \code{1}. Text size.}

\item{color}{Default \code{black}. Color of the labels.}

\item{font}{Default \code{1}. An integer which specifies which font to use for text.
If possible, device drivers arrange so that 1 corresponds to plain text (the default),
2 to bold face, 3 to italic and 4 to bold italic.}

\item{pch}{Default \code{20}, solid. Point symbol.
\code{0} = square, \code{1} = circle, \code{2} = triangle point up, \code{3} = plus, \code{4} = cross,
\code{5} = diamond, \code{6} = triangle point down, \code{7} = square cross, \code{8} = star,
\code{9} = diamond plus, \code{10} = circle plus, \code{11} = triangles up and down,
\code{12} = square plus, \code{13} = circle cross, \code{14} = square and triangle down,
\code{15} = filled square, \code{16} = filled circle, \code{17} = filled triangle point-up,
\code{18} = filled diamond, \code{19} = solid circle, \code{20} = bullet (smaller circle),
\code{21} = filled circle blue, \code{22} = filled square blue, \code{23} = filled diamond blue,
\code{24} = filled triangle point-up blue, \code{25} = filled triangle point down blue}

\item{point_size}{Default \code{0}, no points. Point size.}

\item{point_color}{Default \code{NA}. Colors of the points. Unless otherwise specified, this defaults to \code{color}.}

\item{offset}{Default \code{c(0,0)}. Horizontal and vertical offset to apply to the label, in units of \code{geometry}.}

\item{data_label_column}{Default \code{NULL}. The column in the \code{sf} object that contains the labels.}

\item{halo_color}{Default \code{NA}, no halo. If a color is specified, the text label will be surrounded by a halo
of this color.}

\item{halo_expand}{Default \code{2}. Number of pixels to expand the halo.}

\item{halo_alpha}{Default \code{1}. Transparency of the halo.}

\item{halo_offset}{Default \code{c(0,0)}. Horizontal and vertical offset to apply to the halo, in units of \code{geometry}.}

\item{halo_blur}{Default \code{1}. Amount of blur to apply to the halo. Values greater than \code{30} won't result in further blurring.}

\item{seed}{Default \code{NA}, no seed. Random seed for ensuring the consistent placement of labels around points.}
}
\value{
Semi-transparent overlay with labels.
}
\description{
This uses the \code{car::placeLabel()} function to generate labels for the given scene. Either
use an \code{sf} object or manually specify the x/y coordinates and label.
}
\examples{
#Add the included `sf` object with roads to the montereybay dataset
if(run_documentation()) {
#Create the water palette
water_palette = colorRampPalette(c("darkblue", "dodgerblue", "lightblue"))(200)
bathy_hs = height_shade(montereybay, texture = water_palette)
#Set label font
par(family = "Arial")

#We're plotting the polygon data here for counties around Monterey Bay. We'll first
#plot the county names at the polygon centroids.
bathy_hs \%>\% 
 add_shadow(lamb_shade(montereybay,zscale=50),0.3) \%>\%
 add_overlay(generate_polygon_overlay(monterey_counties_sf, palette = rainbow, 
                                      extent = attr(montereybay,"extent"),
                                      heightmap = montereybay)) \%>\% 
 add_overlay(generate_label_overlay(labels=monterey_counties_sf,
                                    color="black", point_size = 1, text_size = 1,
                                    data_label_column = "NAME",
                                    extent= attr(montereybay,"extent"), heightmap = montereybay,
                                    seed=1))  \%>\%
 plot_map()
}
if(run_documentation()) {
#It's hard to read these values, so we'll add a white halo.
bathy_hs \%>\% 
 add_shadow(lamb_shade(montereybay,zscale=50),0.3) \%>\%
 add_overlay(generate_polygon_overlay(monterey_counties_sf, palette = rainbow, 
                                      extent = attr(montereybay,"extent"),
                                      heightmap = montereybay)) \%>\% 
 add_overlay(generate_label_overlay(labels=monterey_counties_sf,
                                    color="black", point_size = 1, text_size = 1,
                                    data_label_column = "NAME",
                                    extent= attr(montereybay,"extent"), heightmap = montereybay,
                                    halo_color = "white", halo_expand = 3,
                                    seed=1))  \%>\%
 plot_map()
}
if(run_documentation()) {
#Plot the actual town locations, using the manual plotting interface instead of the `sf` object
montereybay \%>\%
 height_shade() \%>\%
 add_overlay(generate_altitude_overlay(bathy_hs, montereybay, 0, 0)) \%>\% 
 add_shadow(lamb_shade(montereybay,zscale=50),0.3) \%>\%
 add_overlay(generate_label_overlay(labels=as.character(monterey_counties_sf$NAME),
                                    x=as.numeric(as.character(monterey_counties_sf$INTPTLON)),
                                    y=as.numeric(as.character(monterey_counties_sf$INTPTLAT)),
                                    color="black", point_size = 1, text_size = 1,
                                    extent= attr(montereybay,"extent"), heightmap = montereybay,
                                    halo_color = "white", halo_expand = 3,
                                    seed=1))  \%>\%
 plot_map()
}
if(run_documentation()) {
#Adding a softer blurred halo
montereybay \%>\%
 height_shade() \%>\%
 add_overlay(generate_altitude_overlay(bathy_hs, montereybay, 0, 0)) \%>\% 
 add_shadow(lamb_shade(montereybay,zscale=50),0.3) \%>\%
 add_overlay(generate_label_overlay(labels=as.character(monterey_counties_sf$NAME),
                                    x=as.numeric(as.character(monterey_counties_sf$INTPTLON)),
                                    y=as.numeric(as.character(monterey_counties_sf$INTPTLAT)),
                                    color="black", point_size = 1, text_size = 1,
                                    extent= attr(montereybay,"extent"), heightmap = montereybay,
                                    halo_color = "white", halo_expand = 3, halo_blur=10,
                                    seed=1))  \%>\%
 plot_map()
}
if(run_documentation()) {
#Changing the seed changes the locations of the labels
montereybay \%>\%
 height_shade() \%>\%
 add_overlay(generate_altitude_overlay(bathy_hs, montereybay, 0, 0)) \%>\% 
 add_shadow(lamb_shade(montereybay,zscale=50),0.3) \%>\%
 add_overlay(generate_label_overlay(labels=as.character(monterey_counties_sf$NAME),
                                    x=as.numeric(as.character(monterey_counties_sf$INTPTLON)),
                                    y=as.numeric(as.character(monterey_counties_sf$INTPTLAT)),
                                    color="black", point_size = 1, text_size = 1,
                                    extent= attr(montereybay,"extent"), heightmap = montereybay,
                                    halo_color = "white", halo_expand = 3, halo_blur=10,
                                    seed=2))  \%>\%
 plot_map()
}
}
